package com.example.effectivejava;

/**
 * 《effective java》-8：避免使用终结方法和清理方法
 * 终结方法（Finalizer）是不可预知的，很多时候是危险的，而且一般情况下是不必要的，Java 9开始被遗弃
 * 清理方法（cleaner）比起终结方法，清理方法相对安全点，但仍是不可以预知的，运行慢的，而且一般情况下是不必要的
 * 缺点：
 * 1、无法保证它们及时地被执行
 * 2、Java语言规范不仅不保证终结方法或清理方法会被及时运行，而且不保证它们最终会运行
 * 3、终结过程中若有未被捕获的异常抛出，则抛出的异常会被忽略，而且该对象的终结过程也会终止
 * 4、使用终结方法和清理方法还会导致严重的性能损失
 * 5、终结方法还有一个严重的安全问题：它将你的类暴露于终结方法攻击（finalizer attack），
 * 为了防止非final类遭受终结方法攻击，我们可以写一个什么都不做而且是final的终结方法
 *
 * 该如何清理资源：
 * 让类继承AutoCloseable接口即可，并要求使用这个类的客户端在每个类实例都不再需要时就调用close方法，一般都是运用try-with-resources来保证资源的终止使用
 * @author Don
 * @date 2022/2/18.
 */
public class AvoidFinalizeDemo {

}
